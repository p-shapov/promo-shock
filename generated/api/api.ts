/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Stream
 */
export interface Stream {
    /**
     * 
     * @type {File}
     * @memberof Stream
     */
    'sale_address': File;
    /**
     * 
     * @type {File}
     * @memberof Stream
     */
    'owner_address': File;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    'banner': string;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'start_date': number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'sale_start_date': number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'sale_end_date': number;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    'streamer_link': string;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'total_amount': number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'reserved_amount': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All Promos
         * @param {any} [offset] 
         * @param {any} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPromosPromoGet: async (offset?: any, limit?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/promo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                for (const [key, value] of Object.entries(offset)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (limit !== undefined) {
                for (const [key, value] of Object.entries(limit)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All Tickets
         * @param {any} [offset] 
         * @param {any} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allTicketsTicketGet: async (offset?: any, limit?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                for (const [key, value] of Object.entries(offset)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (limit !== undefined) {
                for (const [key, value] of Object.entries(limit)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startIndexIndexStartPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary All Promos
         * @param {any} [offset] 
         * @param {any} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allPromosPromoGet(offset?: any, limit?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allPromosPromoGet(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.allPromosPromoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary All Tickets
         * @param {any} [offset] 
         * @param {any} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allTicketsTicketGet(offset?: any, limit?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Stream>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allTicketsTicketGet(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.allTicketsTicketGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Start Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startIndexIndexStartPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startIndexIndexStartPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.startIndexIndexStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary All Promos
         * @param {any} [offset] 
         * @param {any} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPromosPromoGet(offset?: any, limit?: any, options?: any): AxiosPromise<any> {
            return localVarFp.allPromosPromoGet(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All Tickets
         * @param {any} [offset] 
         * @param {any} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allTicketsTicketGet(offset?: any, limit?: any, options?: any): AxiosPromise<Array<Stream>> {
            return localVarFp.allTicketsTicketGet(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startIndexIndexStartPost(options?: any): AxiosPromise<any> {
            return localVarFp.startIndexIndexStartPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary All Promos
     * @param {any} [offset] 
     * @param {any} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public allPromosPromoGet(offset?: any, limit?: any, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).allPromosPromoGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All Tickets
     * @param {any} [offset] 
     * @param {any} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public allTicketsTicketGet(offset?: any, limit?: any, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).allTicketsTicketGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startIndexIndexStartPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startIndexIndexStartPost(options).then((request) => request(this.axios, this.basePath));
    }
}



